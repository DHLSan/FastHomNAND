-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ntt_IPS is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    data_IN_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    data_IN_TVALID : IN STD_LOGIC;
    data_IN_TREADY : OUT STD_LOGIC;
    data_OUT_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_OUT_TVALID : OUT STD_LOGIC;
    data_OUT_TREADY : IN STD_LOGIC;
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ntt_IPS is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ntt_IPS_ntt_IPS,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.981000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1904,HLS_SYN_LUT=2987,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv30_200 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_401 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000001";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv35_700000001 : STD_LOGIC_VECTOR (34 downto 0) := "11100000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFF00000001 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111100000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal cont : STD_LOGIC_VECTOR (31 downto 0);
    signal xx_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal xx_ce0 : STD_LOGIC;
    signal xx_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_IN_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln635_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_OUT_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln704_reg_1297 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal icmp_ln704_reg_1297_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_340 : STD_LOGIC_VECTOR (10 downto 0);
    signal xin_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_354 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_state34_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state36_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln635_fu_359_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal icmp_ln71_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln71_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_reg_1044 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_1_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln71_1_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_cast_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_cast_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_2_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln74_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_1_fu_421_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal j_3_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln79_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_1084 : STD_LOGIC_VECTOR (0 downto 0);
    signal xin_addr_1_reg_1088 : STD_LOGIC_VECTOR (9 downto 0);
    signal xin_addr_2_reg_1093 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln71_fu_440_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln491_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_fu_452_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_reg_1107 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_cast_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_reg_1112 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln493_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln493_reg_1117 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sdiv_ln493_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal trunc_ln493_fu_478_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln493_reg_1126 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln493_1_reg_1131 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln493_fu_492_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln493_fu_496_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln493_reg_1141 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln493_1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln493_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln493_reg_1150 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln493_2_fu_511_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln493_2_reg_1155 : STD_LOGIC_VECTOR (9 downto 0);
    signal cmp5_i_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp5_i_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal y1_1_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y1_1_reg_1165 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv6_i_i_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv6_i_i_reg_1171 : STD_LOGIC_VECTOR (63 downto 0);
    signal trans_size_1_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln494_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln494_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln495_1_fu_570_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln495_1_reg_1190 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln494_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xin_addr_4_reg_1195 : STD_LOGIC_VECTOR (9 downto 0);
    signal xin_addr_5_reg_1200 : STD_LOGIC_VECTOR (9 downto 0);
    signal xin_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal xin_load_4_reg_1206 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_3_fu_641_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_3_reg_1216 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_667_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln35_reg_1221 : STD_LOGIC_VECTOR (32 downto 0);
    signal c_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_3_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_4_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_fu_705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln5_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal mines_fu_879_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mines_reg_1254 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal plus_fu_892_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal plus_reg_1259 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln55_fu_898_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal sub_ln55_reg_1266 : STD_LOGIC_VECTOR (34 downto 0);
    signal b_3_fu_939_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_3_reg_1271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln516_fu_1009_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln516_reg_1282 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal add_ln704_fu_1015_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln704_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state34 : STD_LOGIC;
    signal xin_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal xin_ce0 : STD_LOGIC;
    signal xin_we0 : STD_LOGIC;
    signal xin_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal xin_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xin_ce1 : STD_LOGIC;
    signal xin_we1 : STD_LOGIC;
    signal xin_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_217 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_228 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_263 : STD_LOGIC_VECTOR (29 downto 0);
    signal trans_size_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal wbarr_1_reg_286 : STD_LOGIC_VECTOR (32 downto 0);
    signal t_reg_296 : STD_LOGIC_VECTOR (30 downto 0);
    signal wb_reg_307 : STD_LOGIC_VECTOR (63 downto 0);
    signal trans_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal phi_mul_reg_329 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln497_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_fu_1027_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wbarr_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln491_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln510_fu_969_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln511_fu_1003_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_411_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_472_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln493_fu_492_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y1_fu_525_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln495_fu_575_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln497_fu_585_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_fu_599_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0y0_fu_617_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x0y0_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0y1_fu_622_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0y1_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1y0_fu_627_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x1y0_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1y1_fu_632_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1y1_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0y0_fu_617_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x1y0_fu_627_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln35_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0y1_fu_622_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln35_1_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_2_fu_663_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln35_1_fu_655_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln36_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1y1_fu_632_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_722_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln35_fu_719_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln37_1_fu_734_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln37_2_fu_737_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln37_fu_740_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln37_3_fu_746_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln37_fu_731_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal pp1_fu_725_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_2_fu_756_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal pp2_fu_750_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_3_fu_770_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln40_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln38_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_2_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_1_fu_789_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln42_fu_804_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln42_1_fu_808_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal bpc_fu_811_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln47_fu_821_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_825_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_2_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln47_fu_833_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_839_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_857_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_849_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_1_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln49_fu_875_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal bpc_1_fu_869_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_2_fu_885_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln49_1_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln52_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln55_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln52_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln53_fu_918_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln55_fu_926_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_2_fu_931_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln510_fu_945_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add11_i_fu_957_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln510_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln510_fu_963_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln511_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln511_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln511_fu_989_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln511_fu_995_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_472_ap_start : STD_LOGIC;
    signal grp_fu_472_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal regslice_both_data_OUT_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal regslice_both_data_IN_U_apdone_blk : STD_LOGIC;
    signal data_IN_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal data_IN_TVALID_int_regslice : STD_LOGIC;
    signal data_IN_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_data_IN_U_ack_in : STD_LOGIC;
    signal data_OUT_TVALID_int_regslice : STD_LOGIC;
    signal data_OUT_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_data_OUT_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ntt_IPS_sdiv_13ns_32ns_32_17_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ntt_IPS_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ntt_IPS_xx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ntt_IPS_xin IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ntt_IPS_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        cont : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component ntt_IPS_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    xx_U : component ntt_IPS_xx
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xx_address0,
        ce0 => xx_ce0,
        q0 => xx_q0);

    CTRL_s_axi_U : component ntt_IPS_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        cont => cont,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    xin_U : component ntt_IPS_xin
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xin_address0,
        ce0 => xin_ce0,
        we0 => xin_we0,
        d0 => xin_d0,
        q0 => xin_q0,
        address1 => xin_address1,
        ce1 => xin_ce1,
        we1 => xin_we1,
        d1 => xin_d1,
        q1 => xin_q1);

    sdiv_13ns_32ns_32_17_seq_1_U1 : component ntt_IPS_sdiv_13ns_32ns_32_17_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 13,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_472_ap_start,
        done => grp_fu_472_ap_done,
        din0 => grp_fu_472_p0,
        din1 => trans_size_reg_274,
        ce => ap_const_logic_1,
        dout => grp_fu_472_p2);

    mul_32ns_32ns_64_1_1_U2 : component ntt_IPS_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => x0y0_fu_617_p0,
        din1 => x0y0_fu_617_p1,
        dout => x0y0_fu_617_p2);

    mul_32ns_32ns_64_1_1_U3 : component ntt_IPS_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => x0y1_fu_622_p0,
        din1 => x0y1_fu_622_p1,
        dout => x0y1_fu_622_p2);

    mul_32ns_32ns_64_1_1_U4 : component ntt_IPS_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => x1y0_fu_627_p0,
        din1 => x1y0_fu_627_p1,
        dout => x1y0_fu_627_p2);

    mul_32ns_32ns_64_1_1_U5 : component ntt_IPS_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => x1y1_fu_632_p0,
        din1 => x1y1_fu_632_p1,
        dout => x1y1_fu_632_p2);

    regslice_both_data_IN_U : component ntt_IPS_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_IN_TDATA,
        vld_in => data_IN_TVALID,
        ack_in => regslice_both_data_IN_U_ack_in,
        data_out => data_IN_TDATA_int_regslice,
        vld_out => data_IN_TVALID_int_regslice,
        ack_out => data_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_data_IN_U_apdone_blk);

    regslice_both_data_OUT_U : component ntt_IPS_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => xin_q1,
        vld_in => data_OUT_TVALID_int_regslice,
        ack_in => data_OUT_TREADY_int_regslice,
        data_out => data_OUT_TDATA,
        vld_out => regslice_both_data_OUT_U_vld_out,
        ack_out => data_OUT_TREADY,
        apdone_blk => regslice_both_data_OUT_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state34))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln491_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state34)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state34);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((icmp_ln491_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    b_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                b_reg_263 <= b_1_fu_421_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_376_p2 = ap_const_lv1_0))) then 
                b_reg_263 <= ap_const_lv30_200;
            end if; 
        end if;
    end process;

    i_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_228 <= ap_const_lv11_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_228 <= add_ln71_fu_440_p2;
            end if; 
        end if;
    end process;

    i_2_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln491_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_reg_340 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln704_fu_1021_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_2_reg_340 <= add_ln704_fu_1015_p2;
            end if; 
        end if;
    end process;

    i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_217 <= ap_const_lv11_0;
            elsif ((not(((icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (data_IN_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_217 <= add_ln635_fu_359_p2;
            end if; 
        end if;
    end process;

    j_1_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_1_reg_252 <= j_2_fu_405_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_376_p2 = ap_const_lv1_0))) then 
                j_1_reg_252 <= j_reg_240;
            end if; 
        end if;
    end process;

    j_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_240 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_240 <= j_3_reg_1079;
            end if; 
        end if;
    end process;

    phi_mul_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_1_fu_502_p2 = ap_const_lv1_0) and (icmp_ln493_reg_1117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                phi_mul_reg_329 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                phi_mul_reg_329 <= add_ln495_1_reg_1190;
            end if; 
        end if;
    end process;

    t_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                t_reg_296 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                t_reg_296 <= add_ln493_reg_1141;
            end if; 
        end if;
    end process;

    trans_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_1_fu_502_p2 = ap_const_lv1_0) and (icmp_ln493_reg_1117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                trans_reg_318 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                trans_reg_318 <= add_ln494_reg_1182;
            end if; 
        end if;
    end process;

    trans_size_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_376_p2 = ap_const_lv1_1))) then 
                trans_size_reg_274(1) <= '1';
                trans_size_reg_274(2) <= '0';
                trans_size_reg_274(3) <= '0';
                trans_size_reg_274(4) <= '0';
                trans_size_reg_274(5) <= '0';
                trans_size_reg_274(6) <= '0';
                trans_size_reg_274(7) <= '0';
                trans_size_reg_274(8) <= '0';
                trans_size_reg_274(9) <= '0';
                trans_size_reg_274(10) <= '0';
                trans_size_reg_274(11) <= '0';
                trans_size_reg_274(12) <= '0';
                trans_size_reg_274(13) <= '0';
                trans_size_reg_274(14) <= '0';
                trans_size_reg_274(15) <= '0';
                trans_size_reg_274(16) <= '0';
                trans_size_reg_274(17) <= '0';
                trans_size_reg_274(18) <= '0';
                trans_size_reg_274(19) <= '0';
                trans_size_reg_274(20) <= '0';
                trans_size_reg_274(21) <= '0';
                trans_size_reg_274(22) <= '0';
                trans_size_reg_274(23) <= '0';
                trans_size_reg_274(24) <= '0';
                trans_size_reg_274(25) <= '0';
                trans_size_reg_274(26) <= '0';
                trans_size_reg_274(27) <= '0';
                trans_size_reg_274(28) <= '0';
                trans_size_reg_274(29) <= '0';
                trans_size_reg_274(30) <= '0';
                trans_size_reg_274(31) <= '0';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and ((icmp_ln493_1_fu_502_p2 = ap_const_lv1_1) or (icmp_ln493_reg_1117 = ap_const_lv1_1)))) then 
                                trans_size_reg_274(31 downto 1) <= trans_size_1_fu_553_p2(31 downto 1);
            end if; 
        end if;
    end process;

    wb_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                wb_reg_307 <= ap_const_lv64_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                wb_reg_307 <= xx_q0;
            end if; 
        end if;
    end process;

    wbarr_1_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                wbarr_1_reg_286 <= sext_ln493_fu_492_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                wbarr_1_reg_286 <= add_ln516_reg_1282;
            end if; 
        end if;
    end process;

    wbarr_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_376_p2 = ap_const_lv1_1))) then 
                wbarr_fu_134 <= ap_const_lv32_0;
            elsif (((icmp_ln493_1_fu_502_p2 = ap_const_lv1_1) and (icmp_ln493_reg_1117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                wbarr_fu_134 <= add_ln491_fu_543_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp5_i_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                add_ln35_reg_1221 <= add_ln35_fu_667_p2;
                c_reg_1226 <= c_fu_679_p2;
                d_reg_1211 <= d_fu_637_p1;
                trunc_ln35_3_reg_1216 <= x0y0_fu_617_p2(63 downto 32);
                trunc_ln37_3_reg_1231 <= x1y0_fu_627_p2(63 downto 32);
                trunc_ln37_4_reg_1237 <= x0y1_fu_622_p2(63 downto 32);
                trunc_ln37_reg_1243 <= trunc_ln37_fu_705_p1;
                trunc_ln5_reg_1249 <= x1y1_fu_632_p2(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_reg_1117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                add_ln493_reg_1141 <= add_ln493_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln494_reg_1182 <= add_ln494_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln494_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                add_ln495_1_reg_1190 <= add_ln495_1_fu_570_p2;
                xin_addr_4_reg_1195 <= zext_ln497_fu_580_p1(10 - 1 downto 0);
                xin_addr_5_reg_1200 <= zext_ln498_fu_590_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_ln516_reg_1282 <= add_ln516_fu_1009_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                b_3_reg_1271 <= b_3_fu_939_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                b_cast_reg_1061 <= b_cast_fu_395_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_1_fu_502_p2 = ap_const_lv1_0) and (icmp_ln493_reg_1117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                cmp5_i_reg_1160 <= cmp5_i_fu_515_p2;
                    conv6_i_i_reg_1171(31 downto 0) <= conv6_i_i_fu_539_p1(31 downto 0);
                trunc_ln493_2_reg_1155 <= trunc_ln493_2_fu_511_p1;
                    y1_1_reg_1165(31 downto 0) <= y1_1_fu_535_p1(31 downto 0);
                    zext_ln493_reg_1150(32 downto 0) <= zext_ln493_fu_507_p1(32 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln491_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                icmp_ln493_reg_1117 <= icmp_ln493_fu_466_p2;
                    tmp_cast_reg_1112(30 downto 0) <= tmp_cast_fu_462_p1(30 downto 0);
                tmp_reg_1107 <= trans_size_reg_274(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln704_reg_1297 <= icmp_ln704_fu_1021_p2;
                icmp_ln704_reg_1297_pp3_iter1_reg <= icmp_ln704_reg_1297;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln79_reg_1084 <= icmp_ln79_fu_435_p2;
                j_3_reg_1079 <= j_3_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp5_i_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                mines_reg_1254 <= mines_fu_879_p2;
                plus_reg_1259 <= plus_fu_892_p2;
                sub_ln55_reg_1266 <= sub_ln55_fu_898_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((icmp_ln704_reg_1297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then
                reg_354 <= xin_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                sdiv_ln493_reg_1121 <= grp_fu_472_p2;
                trunc_ln493_1_reg_1131 <= trans_size_reg_274(10 downto 1);
                    trunc_ln493_reg_1126(9 downto 1) <= trunc_ln493_fu_478_p1(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                xin_addr_1_reg_1088 <= zext_ln79_fu_430_p1(10 - 1 downto 0);
                xin_addr_2_reg_1093 <= zext_ln71_reg_1044(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                xin_load_4_reg_1206 <= xin_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_376_p2 = ap_const_lv1_0))) then
                    zext_ln71_1_reg_1049(10 downto 0) <= zext_ln71_1_fu_386_p1(10 downto 0);
                    zext_ln71_reg_1044(10 downto 0) <= zext_ln71_fu_382_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln71_reg_1044(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln71_1_reg_1049(31 downto 11) <= "000000000000000000000";
    tmp_cast_reg_1112(31) <= '0';
    trunc_ln493_reg_1126(0) <= '0';
    zext_ln493_reg_1150(63 downto 33) <= "0000000000000000000000000000000";
    y1_1_reg_1165(63 downto 32) <= "00000000000000000000000000000000";
    conv6_i_i_reg_1171(63 downto 32) <= "00000000000000000000000000000000";
    trans_size_reg_274(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln635_fu_365_p2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, icmp_ln71_fu_376_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln74_fu_399_p2, ap_CS_fsm_state6, icmp_ln79_fu_435_p2, icmp_ln491_fu_446_p2, ap_CS_fsm_state9, icmp_ln493_fu_466_p2, icmp_ln493_reg_1117, ap_CS_fsm_state26, icmp_ln493_1_fu_502_p2, ap_CS_fsm_state27, icmp_ln494_fu_565_p2, ap_enable_reg_pp3_iter0, icmp_ln704_fu_1021_p2, ap_block_pp3_stage0_subdone, ap_CS_fsm_state37, regslice_both_data_OUT_U_apdone_blk, data_IN_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (data_IN_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (data_IN_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln635_fu_365_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln71_fu_376_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln74_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln79_fu_435_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln491_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((icmp_ln493_fu_466_p2 = ap_const_lv1_1) and (icmp_ln491_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and ((icmp_ln493_1_fu_502_p2 = ap_const_lv1_1) or (icmp_ln493_reg_1117 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln494_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln704_fu_1021_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln704_fu_1021_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state37 => 
                if (((regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_1_fu_784_p2 <= std_logic_vector(unsigned(zext_ln40_fu_780_p1) + unsigned(trunc_ln5_reg_1249));
    add11_i_fu_957_p2 <= std_logic_vector(unsigned(reg_354) + unsigned(b_3_fu_939_p3));
    add_ln35_fu_667_p2 <= std_logic_vector(unsigned(zext_ln35_2_fu_663_p1) + unsigned(zext_ln35_1_fu_655_p1));
    add_ln36_fu_673_p2 <= std_logic_vector(unsigned(trunc_ln35_3_fu_641_p4) + unsigned(trunc_ln35_fu_651_p1));
    add_ln37_fu_740_p2 <= std_logic_vector(unsigned(zext_ln37_1_fu_734_p1) + unsigned(zext_ln37_2_fu_737_p1));
    add_ln42_1_fu_789_p2 <= std_logic_vector(unsigned(trunc_ln37_3_reg_1231) + unsigned(trunc_ln37_4_reg_1237));
    add_ln42_2_fu_793_p2 <= std_logic_vector(unsigned(trunc_ln37_reg_1243) + unsigned(zext_ln38_fu_766_p1));
    add_ln42_fu_798_p2 <= std_logic_vector(unsigned(add_ln42_2_fu_793_p2) + unsigned(add_ln42_1_fu_789_p2));
    add_ln47_fu_833_p2 <= std_logic_vector(unsigned(shl_ln_fu_825_p3) + unsigned(zext_ln42_2_fu_817_p1));
    add_ln491_fu_543_p2 <= std_logic_vector(unsigned(wbarr_fu_134) + unsigned(tmp_cast_reg_1112));
    add_ln493_fu_496_p2 <= std_logic_vector(unsigned(t_reg_296) + unsigned(ap_const_lv31_1));
    add_ln494_fu_559_p2 <= std_logic_vector(unsigned(trans_reg_318) + unsigned(ap_const_lv32_1));
    add_ln495_1_fu_570_p2 <= std_logic_vector(unsigned(phi_mul_reg_329) + unsigned(trunc_ln493_reg_1126));
    add_ln495_fu_575_p2 <= std_logic_vector(unsigned(phi_mul_reg_329) + unsigned(trunc_ln493_2_reg_1155));
    add_ln497_fu_585_p2 <= std_logic_vector(unsigned(add_ln495_fu_575_p2) + unsigned(trunc_ln493_1_reg_1131));
    add_ln510_fu_963_p2 <= std_logic_vector(unsigned(add11_i_fu_957_p2) + unsigned(ap_const_lv64_FFFFFFFF));
    add_ln511_fu_989_p2 <= std_logic_vector(unsigned(reg_354) + unsigned(ap_const_lv64_FFFFFFFF00000001));
    add_ln516_fu_1009_p2 <= std_logic_vector(unsigned(wbarr_1_reg_286) + unsigned(ap_const_lv33_1));
    add_ln55_fu_926_p2 <= std_logic_vector(signed(sext_ln55_fu_923_p1) + signed(plus_reg_1259));
    add_ln635_fu_359_p2 <= std_logic_vector(unsigned(i_reg_217) + unsigned(ap_const_lv11_1));
    add_ln704_fu_1015_p2 <= std_logic_vector(unsigned(i_2_reg_340) + unsigned(ap_const_lv11_1));
    add_ln71_fu_440_p2 <= std_logic_vector(unsigned(i_1_reg_228) + unsigned(ap_const_lv11_1));
    and_ln_fu_849_p3 <= (tmp_5_fu_839_p4 & ap_const_lv32_0);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(33);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln704_reg_1297, ap_enable_reg_pp3_iter2, icmp_ln704_reg_1297_pp3_iter1_reg, data_OUT_TREADY_int_regslice)
    begin
                ap_block_pp3_stage0_01001 <= (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (data_OUT_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln704_reg_1297_pp3_iter1_reg = ap_const_lv1_0)) or ((icmp_ln704_reg_1297 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (data_OUT_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln704_reg_1297, ap_enable_reg_pp3_iter2, icmp_ln704_reg_1297_pp3_iter1_reg, ap_block_state35_io, ap_block_state36_io, data_OUT_TREADY_int_regslice)
    begin
                ap_block_pp3_stage0_11001 <= (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state36_io) or ((data_OUT_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln704_reg_1297_pp3_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state35_io) or ((icmp_ln704_reg_1297 = ap_const_lv1_0) and (data_OUT_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln704_reg_1297, ap_enable_reg_pp3_iter2, icmp_ln704_reg_1297_pp3_iter1_reg, ap_block_state35_io, ap_block_state36_io, data_OUT_TREADY_int_regslice)
    begin
                ap_block_pp3_stage0_subdone <= (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state36_io) or ((data_OUT_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln704_reg_1297_pp3_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state35_io) or ((icmp_ln704_reg_1297 = ap_const_lv1_0) and (data_OUT_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln635_fu_365_p2, data_IN_TVALID_int_regslice)
    begin
                ap_block_state2 <= ((icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (data_IN_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state34_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(icmp_ln704_reg_1297, data_OUT_TREADY_int_regslice)
    begin
                ap_block_state35_io <= ((icmp_ln704_reg_1297 = ap_const_lv1_0) and (data_OUT_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state35_pp3_stage0_iter1_assign_proc : process(icmp_ln704_reg_1297, data_OUT_TREADY_int_regslice)
    begin
                ap_block_state35_pp3_stage0_iter1 <= ((icmp_ln704_reg_1297 = ap_const_lv1_0) and (data_OUT_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state36_io_assign_proc : process(icmp_ln704_reg_1297_pp3_iter1_reg, data_OUT_TREADY_int_regslice)
    begin
                ap_block_state36_io <= ((data_OUT_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln704_reg_1297_pp3_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state36_pp3_stage0_iter2_assign_proc : process(icmp_ln704_reg_1297_pp3_iter1_reg, data_OUT_TREADY_int_regslice)
    begin
                ap_block_state36_pp3_stage0_iter2 <= ((data_OUT_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln704_reg_1297_pp3_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp3_exit_iter0_state34_assign_proc : process(icmp_ln704_fu_1021_p2)
    begin
        if ((icmp_ln704_fu_1021_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state34 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state37, regslice_both_data_OUT_U_apdone_blk)
    begin
        if (((regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37, regslice_both_data_OUT_U_apdone_blk)
    begin
        if (((regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

        b_1_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_411_p4),30));

    b_2_fu_931_p3 <= 
        sub_ln53_fu_918_p2 when (xor_ln52_fu_912_p2(0) = '1') else 
        add_ln55_fu_926_p2;
    b_3_fu_939_p3 <= 
        xin_load_4_reg_1206 when (cmp5_i_reg_1160(0) = '1') else 
        b_2_fu_931_p3;
        b_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_reg_263),32));

    bpc_1_fu_869_p2 <= std_logic_vector(unsigned(and_ln_fu_849_p3) - unsigned(zext_ln47_fu_865_p1));
    bpc_fu_811_p2 <= std_logic_vector(unsigned(zext_ln42_fu_804_p1) + unsigned(zext_ln42_1_fu_808_p1));
    c_fu_679_p2 <= std_logic_vector(unsigned(add_ln36_fu_673_p2) + unsigned(trunc_ln35_1_fu_659_p1));
    cmp5_i_fu_515_p2 <= "1" when (wb_reg_307 = ap_const_lv64_1) else "0";
    conv6_i_i_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y0_fu_521_p1),64));
    d_fu_637_p1 <= x0y0_fu_617_p2(32 - 1 downto 0);

    data_IN_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln635_fu_365_p2, data_IN_TVALID_int_regslice)
    begin
        if (((icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_IN_TDATA_blk_n <= data_IN_TVALID_int_regslice;
        else 
            data_IN_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_IN_TREADY <= regslice_both_data_IN_U_ack_in;

    data_IN_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln635_fu_365_p2, data_IN_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (data_IN_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_IN_TREADY_int_regslice <= ap_const_logic_1;
        else 
            data_IN_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln704_reg_1297, ap_enable_reg_pp3_iter2, icmp_ln704_reg_1297_pp3_iter1_reg, data_OUT_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln704_reg_1297_pp3_iter1_reg = ap_const_lv1_0)) or ((icmp_ln704_reg_1297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            data_OUT_TDATA_blk_n <= data_OUT_TREADY_int_regslice;
        else 
            data_OUT_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_OUT_TVALID <= regslice_both_data_OUT_U_vld_out;

    data_OUT_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln704_reg_1297, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln704_reg_1297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            data_OUT_TVALID_int_regslice <= ap_const_logic_1;
        else 
            data_OUT_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_472_ap_start_assign_proc : process(icmp_ln491_fu_446_p2, ap_CS_fsm_state9, icmp_ln493_fu_466_p2)
    begin
        if (((icmp_ln493_fu_466_p2 = ap_const_lv1_0) and (icmp_ln491_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_472_ap_start <= ap_const_logic_1;
        else 
            grp_fu_472_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_472_p0 <= ap_const_lv32_400(13 - 1 downto 0);
    i_2_cast_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_340),64));
    i_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_217),64));
    icmp_ln491_fu_446_p2 <= "1" when (signed(trans_size_reg_274) < signed(ap_const_lv32_401)) else "0";
    icmp_ln493_1_fu_502_p2 <= "1" when (t_reg_296 = tmp_reg_1107) else "0";
    icmp_ln493_fu_466_p2 <= "1" when (tmp_fu_452_p4 = ap_const_lv31_0) else "0";
    icmp_ln494_fu_565_p2 <= "1" when (trans_reg_318 = sdiv_ln493_reg_1121) else "0";
    icmp_ln510_fu_951_p2 <= "1" when (unsigned(sub_ln510_fu_945_p2) > unsigned(b_3_fu_939_p3)) else "0";
    icmp_ln511_fu_978_p2 <= "1" when (unsigned(reg_354) < unsigned(b_3_reg_1271)) else "0";
    icmp_ln52_fu_907_p2 <= "1" when (unsigned(plus_reg_1259) < unsigned(zext_ln49_1_fu_904_p1)) else "0";
    icmp_ln635_fu_365_p2 <= "1" when (i_reg_217 = ap_const_lv11_400) else "0";
    icmp_ln704_fu_1021_p2 <= "1" when (i_2_reg_340 = ap_const_lv11_400) else "0";
    icmp_ln71_fu_376_p2 <= "1" when (i_1_reg_228 = ap_const_lv11_400) else "0";
    icmp_ln74_fu_399_p2 <= "1" when (signed(j_1_reg_252) < signed(b_cast_fu_395_p1)) else "0";
    icmp_ln79_fu_435_p2 <= "1" when (signed(j_3_fu_425_p2) > signed(zext_ln71_1_reg_1049)) else "0";
    j_2_fu_405_p2 <= std_logic_vector(unsigned(j_1_reg_252) - unsigned(b_cast_fu_395_p1));
    j_3_fu_425_p2 <= std_logic_vector(unsigned(j_1_reg_252) + unsigned(b_cast_reg_1061));
    mines_fu_879_p2 <= std_logic_vector(unsigned(zext_ln49_fu_875_p1) + unsigned(zext_ln42_fu_804_p1));
    plus_fu_892_p2 <= std_logic_vector(unsigned(bpc_1_fu_869_p2) + unsigned(zext_ln50_fu_889_p1));
    pp1_fu_725_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_722_p1) + unsigned(zext_ln35_fu_719_p1));
    pp2_fu_750_p2 <= std_logic_vector(unsigned(zext_ln37_3_fu_746_p1) + unsigned(zext_ln37_fu_731_p1));
    select_ln510_fu_969_p3 <= 
        add11_i_fu_957_p2 when (icmp_ln510_fu_951_p2(0) = '1') else 
        add_ln510_fu_963_p2;
    select_ln511_fu_995_p3 <= 
        reg_354 when (xor_ln511_fu_983_p2(0) = '1') else 
        add_ln511_fu_989_p2;
    sext_ln493_fu_492_p0 <= wbarr_fu_134;
        sext_ln493_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln493_fu_492_p0),33));

        sext_ln55_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln55_reg_1266),64));

    shl_ln_fu_825_p3 <= (trunc_ln47_fu_821_p1 & ap_const_lv32_0);
    sub_ln510_fu_945_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFF00000001) - signed(reg_354));
    sub_ln511_fu_1003_p2 <= std_logic_vector(unsigned(select_ln511_fu_995_p3) - unsigned(b_3_reg_1271));
    sub_ln53_fu_918_p2 <= std_logic_vector(unsigned(plus_reg_1259) - unsigned(zext_ln49_1_fu_904_p1));
    sub_ln55_fu_898_p2 <= std_logic_vector(signed(ap_const_lv35_700000001) - signed(zext_ln49_2_fu_885_p1));
    tmp_1_fu_411_p4 <= b_reg_263(29 downto 1);
    tmp_2_fu_756_p4 <= pp1_fu_725_p2(33 downto 32);
    tmp_3_fu_770_p4 <= pp2_fu_750_p2(33 downto 32);
    tmp_4_fu_857_p3 <= bpc_fu_811_p2(32 downto 32);
    tmp_5_fu_839_p4 <= add_ln47_fu_833_p2(63 downto 32);
    tmp_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_452_p4),32));
    tmp_fu_452_p4 <= trans_size_reg_274(31 downto 1);
    trans_size_1_fu_553_p2 <= std_logic_vector(shift_left(unsigned(trans_size_reg_274),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    trunc_ln35_1_fu_659_p1 <= x0y1_fu_622_p2(32 - 1 downto 0);
    trunc_ln35_3_fu_641_p4 <= x0y0_fu_617_p2(63 downto 32);
    trunc_ln35_fu_651_p1 <= x1y0_fu_627_p2(32 - 1 downto 0);
    trunc_ln37_fu_705_p1 <= x1y1_fu_632_p2(32 - 1 downto 0);
    trunc_ln47_fu_821_p1 <= bpc_fu_811_p2(32 - 1 downto 0);
    trunc_ln493_2_fu_511_p1 <= t_reg_296(10 - 1 downto 0);
    trunc_ln493_fu_478_p1 <= trans_size_reg_274(10 - 1 downto 0);
    x0_fu_595_p1 <= xin_q0(32 - 1 downto 0);
    x0y0_fu_617_p0 <= zext_ln27_fu_613_p1(32 - 1 downto 0);
    x0y0_fu_617_p1 <= conv6_i_i_reg_1171(32 - 1 downto 0);
    x0y1_fu_622_p0 <= zext_ln27_fu_613_p1(32 - 1 downto 0);
    x0y1_fu_622_p1 <= y1_1_reg_1165(32 - 1 downto 0);
    x1_fu_599_p4 <= xin_q0(63 downto 32);
    x1y0_fu_627_p0 <= zext_ln20_fu_609_p1(32 - 1 downto 0);
    x1y0_fu_627_p1 <= conv6_i_i_reg_1171(32 - 1 downto 0);
    x1y1_fu_632_p0 <= zext_ln20_fu_609_p1(32 - 1 downto 0);
    x1y1_fu_632_p1 <= y1_1_reg_1165(32 - 1 downto 0);

    xin_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln71_reg_1044, ap_CS_fsm_state6, xin_addr_1_reg_1088, xin_addr_2_reg_1093, ap_CS_fsm_state8, ap_CS_fsm_state27, i_cast_fu_371_p1, zext_ln498_fu_590_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            xin_address0 <= zext_ln498_fu_590_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xin_address0 <= xin_addr_2_reg_1093;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            xin_address0 <= xin_addr_1_reg_1088;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xin_address0 <= zext_ln71_reg_1044(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            xin_address0 <= i_cast_fu_371_p1(10 - 1 downto 0);
        else 
            xin_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    xin_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, ap_CS_fsm_state27, xin_addr_4_reg_1195, xin_addr_5_reg_1200, ap_CS_fsm_state30, ap_enable_reg_pp3_iter0, ap_CS_fsm_state31, zext_ln497_fu_580_p1, i_2_cast_fu_1027_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            xin_address1 <= i_2_cast_fu_1027_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            xin_address1 <= xin_addr_5_reg_1200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            xin_address1 <= xin_addr_4_reg_1195;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            xin_address1 <= zext_ln497_fu_580_p1(10 - 1 downto 0);
        else 
            xin_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    xin_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln635_fu_365_p2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state27, ap_CS_fsm_state7, data_IN_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (not(((icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (data_IN_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            xin_ce0 <= ap_const_logic_1;
        else 
            xin_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state27, ap_CS_fsm_state30, ap_enable_reg_pp3_iter0, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            xin_ce1 <= ap_const_logic_1;
        else 
            xin_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xin_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, xin_q0, ap_CS_fsm_state7, data_IN_TDATA_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            xin_d0 <= xin_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            xin_d0 <= data_IN_TDATA_int_regslice;
        else 
            xin_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xin_d1_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state31, select_ln510_fu_969_p3, sub_ln511_fu_1003_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            xin_d1 <= sub_ln511_fu_1003_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            xin_d1 <= select_ln510_fu_969_p3;
        else 
            xin_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xin_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln635_fu_365_p2, icmp_ln79_reg_1084, ap_CS_fsm_state8, ap_CS_fsm_state7, data_IN_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln79_reg_1084 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (data_IN_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln635_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            xin_we0 <= ap_const_logic_1;
        else 
            xin_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_we1_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            xin_we1 <= ap_const_logic_1;
        else 
            xin_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln511_fu_983_p2 <= (icmp_ln511_fu_978_p2 xor ap_const_lv1_1);
    xor_ln52_fu_912_p2 <= (icmp_ln52_fu_907_p2 xor ap_const_lv1_1);
    xx_address0 <= zext_ln493_reg_1150(10 - 1 downto 0);

    xx_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            xx_ce0 <= ap_const_logic_1;
        else 
            xx_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y0_fu_521_p1 <= wb_reg_307(32 - 1 downto 0);
    y1_1_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y1_fu_525_p4),64));
    y1_fu_525_p4 <= wb_reg_307(63 downto 32);
    zext_ln20_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_fu_599_p4),64));
    zext_ln27_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x0_fu_595_p1),64));
    zext_ln35_1_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln35_fu_651_p1),33));
    zext_ln35_2_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln35_1_fu_659_p1),33));
    zext_ln35_3_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_reg_1221),34));
    zext_ln35_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln35_3_reg_1216),34));
    zext_ln37_1_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln37_4_reg_1237),33));
    zext_ln37_2_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln37_reg_1243),33));
    zext_ln37_3_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_740_p2),34));
    zext_ln37_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln37_3_reg_1231),34));
    zext_ln38_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_756_p4),32));
    zext_ln40_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_770_p4),32));
    zext_ln42_1_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_1226),33));
    zext_ln42_2_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bpc_fu_811_p2),64));
    zext_ln42_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_798_p2),33));
    zext_ln47_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_857_p3),64));
    zext_ln493_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wbarr_1_reg_286),64));
    zext_ln497_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln495_fu_575_p2),64));
    zext_ln498_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln497_fu_585_p2),64));
    zext_ln49_1_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mines_reg_1254),64));
    zext_ln49_2_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mines_fu_879_p2),35));
    zext_ln49_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_1_fu_784_p2),33));
    zext_ln50_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_reg_1211),64));
    zext_ln71_1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_228),32));
    zext_ln71_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_228),64));
    zext_ln79_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_fu_425_p2),64));
end behav;
