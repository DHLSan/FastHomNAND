// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ntt_IPS_ntt_IPS,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.981000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1904,HLS_SYN_LUT=2987,HLS_VERSION=2020_2}" *)

module ntt_IPS (
        ap_clk,
        ap_rst_n,
        data_IN_TDATA,
        data_IN_TVALID,
        data_IN_TREADY,
        data_OUT_TDATA,
        data_OUT_TVALID,
        data_OUT_TREADY,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_pp3_stage0 = 35'd8589934592;
parameter    ap_ST_fsm_state37 = 35'd17179869184;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] data_IN_TDATA;
input   data_IN_TVALID;
output   data_IN_TREADY;
output  [63:0] data_OUT_TDATA;
output   data_OUT_TVALID;
input   data_OUT_TREADY;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] cont;
wire   [9:0] xx_address0;
reg    xx_ce0;
wire   [63:0] xx_q0;
reg    data_IN_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln635_fu_365_p2;
reg    data_OUT_TDATA_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln704_reg_1297;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] icmp_ln704_reg_1297_pp3_iter1_reg;
reg   [10:0] i_2_reg_340;
wire   [63:0] xin_q1;
reg   [63:0] reg_354;
wire    ap_CS_fsm_state28;
wire    ap_block_state34_pp3_stage0_iter0;
reg    ap_block_state35_pp3_stage0_iter1;
reg    ap_block_state35_io;
reg    ap_block_state36_pp3_stage0_iter2;
reg    ap_block_state36_io;
reg    ap_block_pp3_stage0_11001;
wire   [10:0] add_ln635_fu_359_p2;
reg    ap_block_state2;
wire   [0:0] icmp_ln71_fu_376_p2;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln71_fu_382_p1;
reg   [63:0] zext_ln71_reg_1044;
wire   [31:0] zext_ln71_1_fu_386_p1;
reg   [31:0] zext_ln71_1_reg_1049;
wire  signed [31:0] b_cast_fu_395_p1;
reg  signed [31:0] b_cast_reg_1061;
wire    ap_CS_fsm_state5;
wire   [31:0] j_2_fu_405_p2;
wire   [0:0] icmp_ln74_fu_399_p2;
wire  signed [29:0] b_1_fu_421_p1;
wire   [31:0] j_3_fu_425_p2;
reg   [31:0] j_3_reg_1079;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln79_fu_435_p2;
reg   [0:0] icmp_ln79_reg_1084;
reg   [9:0] xin_addr_1_reg_1088;
reg   [9:0] xin_addr_2_reg_1093;
wire   [10:0] add_ln71_fu_440_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln491_fu_446_p2;
wire    ap_CS_fsm_state9;
wire   [30:0] tmp_fu_452_p4;
reg   [30:0] tmp_reg_1107;
wire   [31:0] tmp_cast_fu_462_p1;
reg   [31:0] tmp_cast_reg_1112;
wire   [0:0] icmp_ln493_fu_466_p2;
reg   [0:0] icmp_ln493_reg_1117;
wire   [31:0] grp_fu_472_p2;
reg   [31:0] sdiv_ln493_reg_1121;
wire    ap_CS_fsm_state25;
wire   [9:0] trunc_ln493_fu_478_p1;
reg   [9:0] trunc_ln493_reg_1126;
reg   [9:0] trunc_ln493_1_reg_1131;
wire  signed [32:0] sext_ln493_fu_492_p1;
wire   [30:0] add_ln493_fu_496_p2;
reg   [30:0] add_ln493_reg_1141;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln493_1_fu_502_p2;
wire   [63:0] zext_ln493_fu_507_p1;
reg   [63:0] zext_ln493_reg_1150;
wire   [9:0] trunc_ln493_2_fu_511_p1;
reg   [9:0] trunc_ln493_2_reg_1155;
wire   [0:0] cmp5_i_fu_515_p2;
reg   [0:0] cmp5_i_reg_1160;
wire   [63:0] y1_1_fu_535_p1;
reg   [63:0] y1_1_reg_1165;
wire   [63:0] conv6_i_i_fu_539_p1;
reg   [63:0] conv6_i_i_reg_1171;
wire   [31:0] trans_size_1_fu_553_p2;
wire   [31:0] add_ln494_fu_559_p2;
reg   [31:0] add_ln494_reg_1182;
wire    ap_CS_fsm_state27;
wire   [9:0] add_ln495_1_fu_570_p2;
reg   [9:0] add_ln495_1_reg_1190;
wire   [0:0] icmp_ln494_fu_565_p2;
reg   [9:0] xin_addr_4_reg_1195;
reg   [9:0] xin_addr_5_reg_1200;
wire   [63:0] xin_q0;
reg   [63:0] xin_load_4_reg_1206;
wire   [31:0] d_fu_637_p1;
reg   [31:0] d_reg_1211;
wire   [31:0] trunc_ln35_3_fu_641_p4;
reg   [31:0] trunc_ln35_3_reg_1216;
wire   [32:0] add_ln35_fu_667_p2;
reg   [32:0] add_ln35_reg_1221;
wire   [31:0] c_fu_679_p2;
reg   [31:0] c_reg_1226;
reg   [31:0] trunc_ln37_3_reg_1231;
reg   [31:0] trunc_ln37_4_reg_1237;
wire   [31:0] trunc_ln37_fu_705_p1;
reg   [31:0] trunc_ln37_reg_1243;
reg   [31:0] trunc_ln5_reg_1249;
wire   [32:0] mines_fu_879_p2;
reg   [32:0] mines_reg_1254;
wire    ap_CS_fsm_state29;
wire   [63:0] plus_fu_892_p2;
reg   [63:0] plus_reg_1259;
wire   [34:0] sub_ln55_fu_898_p2;
reg   [34:0] sub_ln55_reg_1266;
wire   [63:0] b_3_fu_939_p3;
reg   [63:0] b_3_reg_1271;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire   [32:0] add_ln516_fu_1009_p2;
reg   [32:0] add_ln516_reg_1282;
wire    ap_CS_fsm_state33;
wire   [10:0] add_ln704_fu_1015_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln704_fu_1021_p2;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state34;
reg   [9:0] xin_address0;
reg    xin_ce0;
reg    xin_we0;
reg   [63:0] xin_d0;
reg   [9:0] xin_address1;
reg    xin_ce1;
reg    xin_we1;
reg   [63:0] xin_d1;
reg   [10:0] i_reg_217;
reg   [10:0] i_1_reg_228;
wire    ap_CS_fsm_state3;
reg   [31:0] j_reg_240;
reg   [31:0] j_1_reg_252;
reg  signed [29:0] b_reg_263;
reg   [31:0] trans_size_reg_274;
reg   [32:0] wbarr_1_reg_286;
reg   [30:0] t_reg_296;
reg   [63:0] wb_reg_307;
reg   [31:0] trans_reg_318;
wire    ap_CS_fsm_state31;
reg   [9:0] phi_mul_reg_329;
wire   [63:0] i_cast_fu_371_p1;
wire   [63:0] zext_ln79_fu_430_p1;
wire   [63:0] zext_ln497_fu_580_p1;
wire   [63:0] zext_ln498_fu_590_p1;
wire   [63:0] i_2_cast_fu_1027_p1;
reg   [31:0] wbarr_fu_134;
wire   [31:0] add_ln491_fu_543_p2;
reg    ap_block_pp3_stage0_01001;
wire    ap_CS_fsm_state7;
wire   [63:0] select_ln510_fu_969_p3;
wire   [63:0] sub_ln511_fu_1003_p2;
wire   [28:0] tmp_1_fu_411_p4;
wire   [12:0] grp_fu_472_p0;
wire  signed [31:0] sext_ln493_fu_492_p0;
wire   [31:0] y1_fu_525_p4;
wire   [31:0] y0_fu_521_p1;
wire   [9:0] add_ln495_fu_575_p2;
wire   [9:0] add_ln497_fu_585_p2;
wire   [31:0] x1_fu_599_p4;
wire   [31:0] x0_fu_595_p1;
wire   [31:0] x0y0_fu_617_p0;
wire   [63:0] zext_ln27_fu_613_p1;
wire   [31:0] x0y0_fu_617_p1;
wire   [31:0] x0y1_fu_622_p0;
wire   [31:0] x0y1_fu_622_p1;
wire   [31:0] x1y0_fu_627_p0;
wire   [63:0] zext_ln20_fu_609_p1;
wire   [31:0] x1y0_fu_627_p1;
wire   [31:0] x1y1_fu_632_p0;
wire   [31:0] x1y1_fu_632_p1;
wire   [63:0] x0y0_fu_617_p2;
wire   [63:0] x1y0_fu_627_p2;
wire   [31:0] trunc_ln35_fu_651_p1;
wire   [63:0] x0y1_fu_622_p2;
wire   [31:0] trunc_ln35_1_fu_659_p1;
wire   [32:0] zext_ln35_2_fu_663_p1;
wire   [32:0] zext_ln35_1_fu_655_p1;
wire   [31:0] add_ln36_fu_673_p2;
wire   [63:0] x1y1_fu_632_p2;
wire   [33:0] zext_ln35_3_fu_722_p1;
wire   [33:0] zext_ln35_fu_719_p1;
wire   [32:0] zext_ln37_1_fu_734_p1;
wire   [32:0] zext_ln37_2_fu_737_p1;
wire   [32:0] add_ln37_fu_740_p2;
wire   [33:0] zext_ln37_3_fu_746_p1;
wire   [33:0] zext_ln37_fu_731_p1;
wire   [33:0] pp1_fu_725_p2;
wire   [1:0] tmp_2_fu_756_p4;
wire   [33:0] pp2_fu_750_p2;
wire   [1:0] tmp_3_fu_770_p4;
wire   [31:0] zext_ln40_fu_780_p1;
wire   [31:0] zext_ln38_fu_766_p1;
wire   [31:0] add_ln42_2_fu_793_p2;
wire   [31:0] add_ln42_1_fu_789_p2;
wire   [31:0] add_ln42_fu_798_p2;
wire   [32:0] zext_ln42_fu_804_p1;
wire   [32:0] zext_ln42_1_fu_808_p1;
wire   [32:0] bpc_fu_811_p2;
wire   [31:0] trunc_ln47_fu_821_p1;
wire   [63:0] shl_ln_fu_825_p3;
wire   [63:0] zext_ln42_2_fu_817_p1;
wire   [63:0] add_ln47_fu_833_p2;
wire   [31:0] tmp_5_fu_839_p4;
wire   [0:0] tmp_4_fu_857_p3;
wire   [63:0] and_ln_fu_849_p3;
wire   [63:0] zext_ln47_fu_865_p1;
wire   [31:0] a_1_fu_784_p2;
wire   [32:0] zext_ln49_fu_875_p1;
wire   [63:0] bpc_1_fu_869_p2;
wire   [63:0] zext_ln50_fu_889_p1;
wire   [34:0] zext_ln49_2_fu_885_p1;
wire   [63:0] zext_ln49_1_fu_904_p1;
wire   [0:0] icmp_ln52_fu_907_p2;
wire  signed [63:0] sext_ln55_fu_923_p1;
wire   [0:0] xor_ln52_fu_912_p2;
wire   [63:0] sub_ln53_fu_918_p2;
wire   [63:0] add_ln55_fu_926_p2;
wire   [63:0] b_2_fu_931_p3;
wire   [63:0] sub_ln510_fu_945_p2;
wire   [63:0] add11_i_fu_957_p2;
wire   [0:0] icmp_ln510_fu_951_p2;
wire   [63:0] add_ln510_fu_963_p2;
wire   [0:0] icmp_ln511_fu_978_p2;
wire   [0:0] xor_ln511_fu_983_p2;
wire   [63:0] add_ln511_fu_989_p2;
wire   [63:0] select_ln511_fu_995_p3;
reg    grp_fu_472_ap_start;
wire    grp_fu_472_ap_done;
wire    ap_CS_fsm_state37;
wire    regslice_both_data_OUT_U_apdone_blk;
reg   [34:0] ap_NS_fsm;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    regslice_both_data_IN_U_apdone_blk;
wire   [63:0] data_IN_TDATA_int_regslice;
wire    data_IN_TVALID_int_regslice;
reg    data_IN_TREADY_int_regslice;
wire    regslice_both_data_IN_U_ack_in;
reg    data_OUT_TVALID_int_regslice;
wire    data_OUT_TREADY_int_regslice;
wire    regslice_both_data_OUT_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
end

ntt_IPS_xx #(
    .DataWidth( 64 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
xx_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xx_address0),
    .ce0(xx_ce0),
    .q0(xx_q0)
);

ntt_IPS_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .cont(cont),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

ntt_IPS_xin #(
    .DataWidth( 64 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
xin_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xin_address0),
    .ce0(xin_ce0),
    .we0(xin_we0),
    .d0(xin_d0),
    .q0(xin_q0),
    .address1(xin_address1),
    .ce1(xin_ce1),
    .we1(xin_we1),
    .d1(xin_d1),
    .q1(xin_q1)
);

ntt_IPS_sdiv_13ns_32ns_32_17_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_13ns_32ns_32_17_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_472_ap_start),
    .done(grp_fu_472_ap_done),
    .din0(grp_fu_472_p0),
    .din1(trans_size_reg_274),
    .ce(1'b1),
    .dout(grp_fu_472_p2)
);

ntt_IPS_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U2(
    .din0(x0y0_fu_617_p0),
    .din1(x0y0_fu_617_p1),
    .dout(x0y0_fu_617_p2)
);

ntt_IPS_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U3(
    .din0(x0y1_fu_622_p0),
    .din1(x0y1_fu_622_p1),
    .dout(x0y1_fu_622_p2)
);

ntt_IPS_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U4(
    .din0(x1y0_fu_627_p0),
    .din1(x1y0_fu_627_p1),
    .dout(x1y0_fu_627_p2)
);

ntt_IPS_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U5(
    .din0(x1y1_fu_632_p0),
    .din1(x1y1_fu_632_p1),
    .dout(x1y1_fu_632_p2)
);

ntt_IPS_regslice_both #(
    .DataWidth( 64 ))
regslice_both_data_IN_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_IN_TDATA),
    .vld_in(data_IN_TVALID),
    .ack_in(regslice_both_data_IN_U_ack_in),
    .data_out(data_IN_TDATA_int_regslice),
    .vld_out(data_IN_TVALID_int_regslice),
    .ack_out(data_IN_TREADY_int_regslice),
    .apdone_blk(regslice_both_data_IN_U_apdone_blk)
);

ntt_IPS_regslice_both #(
    .DataWidth( 64 ))
regslice_both_data_OUT_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(xin_q1),
    .vld_in(data_OUT_TVALID_int_regslice),
    .ack_in(data_OUT_TREADY_int_regslice),
    .data_out(data_OUT_TDATA),
    .vld_out(regslice_both_data_OUT_U_vld_out),
    .ack_out(data_OUT_TREADY),
    .apdone_blk(regslice_both_data_OUT_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state34))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((icmp_ln491_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state34)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state34);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((icmp_ln491_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        b_reg_263 <= b_1_fu_421_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln71_fu_376_p2 == 1'd0))) begin
        b_reg_263 <= 30'd512;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_228 <= 11'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_228 <= add_ln71_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln491_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_2_reg_340 <= 11'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln704_fu_1021_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_2_reg_340 <= add_ln704_fu_1015_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_217 <= 11'd0;
    end else if ((~((icmp_ln635_fu_365_p2 == 1'd0) & (data_IN_TVALID_int_regslice == 1'b0)) & (icmp_ln635_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_217 <= add_ln635_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_1_reg_252 <= j_2_fu_405_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln71_fu_376_p2 == 1'd0))) begin
        j_1_reg_252 <= j_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_240 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_240 <= j_3_reg_1079;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln493_1_fu_502_p2 == 1'd0) & (icmp_ln493_reg_1117 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        phi_mul_reg_329 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        phi_mul_reg_329 <= add_ln495_1_reg_1190;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        t_reg_296 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        t_reg_296 <= add_ln493_reg_1141;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln493_1_fu_502_p2 == 1'd0) & (icmp_ln493_reg_1117 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        trans_reg_318 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        trans_reg_318 <= add_ln494_reg_1182;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln71_fu_376_p2 == 1'd1))) begin
                trans_size_reg_274[1] <= 1'b1;
        trans_size_reg_274[2] <= 1'b0;
        trans_size_reg_274[3] <= 1'b0;
        trans_size_reg_274[4] <= 1'b0;
        trans_size_reg_274[5] <= 1'b0;
        trans_size_reg_274[6] <= 1'b0;
        trans_size_reg_274[7] <= 1'b0;
        trans_size_reg_274[8] <= 1'b0;
        trans_size_reg_274[9] <= 1'b0;
        trans_size_reg_274[10] <= 1'b0;
        trans_size_reg_274[11] <= 1'b0;
        trans_size_reg_274[12] <= 1'b0;
        trans_size_reg_274[13] <= 1'b0;
        trans_size_reg_274[14] <= 1'b0;
        trans_size_reg_274[15] <= 1'b0;
        trans_size_reg_274[16] <= 1'b0;
        trans_size_reg_274[17] <= 1'b0;
        trans_size_reg_274[18] <= 1'b0;
        trans_size_reg_274[19] <= 1'b0;
        trans_size_reg_274[20] <= 1'b0;
        trans_size_reg_274[21] <= 1'b0;
        trans_size_reg_274[22] <= 1'b0;
        trans_size_reg_274[23] <= 1'b0;
        trans_size_reg_274[24] <= 1'b0;
        trans_size_reg_274[25] <= 1'b0;
        trans_size_reg_274[26] <= 1'b0;
        trans_size_reg_274[27] <= 1'b0;
        trans_size_reg_274[28] <= 1'b0;
        trans_size_reg_274[29] <= 1'b0;
        trans_size_reg_274[30] <= 1'b0;
        trans_size_reg_274[31] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state26) & ((icmp_ln493_1_fu_502_p2 == 1'd1) | (icmp_ln493_reg_1117 == 1'd1)))) begin
                trans_size_reg_274[31 : 1] <= trans_size_1_fu_553_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        wb_reg_307 <= 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        wb_reg_307 <= xx_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        wbarr_1_reg_286 <= sext_ln493_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        wbarr_1_reg_286 <= add_ln516_reg_1282;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln71_fu_376_p2 == 1'd1))) begin
        wbarr_fu_134 <= 32'd0;
    end else if (((icmp_ln493_1_fu_502_p2 == 1'd1) & (icmp_ln493_reg_1117 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        wbarr_fu_134 <= add_ln491_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp5_i_reg_1160 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        add_ln35_reg_1221 <= add_ln35_fu_667_p2;
        c_reg_1226 <= c_fu_679_p2;
        d_reg_1211 <= d_fu_637_p1;
        trunc_ln35_3_reg_1216 <= {{x0y0_fu_617_p2[63:32]}};
        trunc_ln37_3_reg_1231 <= {{x1y0_fu_627_p2[63:32]}};
        trunc_ln37_4_reg_1237 <= {{x0y1_fu_622_p2[63:32]}};
        trunc_ln37_reg_1243 <= trunc_ln37_fu_705_p1;
        trunc_ln5_reg_1249 <= {{x1y1_fu_632_p2[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln493_reg_1117 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        add_ln493_reg_1141 <= add_ln493_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln494_reg_1182 <= add_ln494_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln494_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        add_ln495_1_reg_1190 <= add_ln495_1_fu_570_p2;
        xin_addr_4_reg_1195 <= zext_ln497_fu_580_p1;
        xin_addr_5_reg_1200 <= zext_ln498_fu_590_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        add_ln516_reg_1282 <= add_ln516_fu_1009_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        b_3_reg_1271 <= b_3_fu_939_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_cast_reg_1061 <= b_cast_fu_395_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln493_1_fu_502_p2 == 1'd0) & (icmp_ln493_reg_1117 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        cmp5_i_reg_1160 <= cmp5_i_fu_515_p2;
        conv6_i_i_reg_1171[31 : 0] <= conv6_i_i_fu_539_p1[31 : 0];
        trunc_ln493_2_reg_1155 <= trunc_ln493_2_fu_511_p1;
        y1_1_reg_1165[31 : 0] <= y1_1_fu_535_p1[31 : 0];
        zext_ln493_reg_1150[32 : 0] <= zext_ln493_fu_507_p1[32 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln491_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        icmp_ln493_reg_1117 <= icmp_ln493_fu_466_p2;
        tmp_cast_reg_1112[30 : 0] <= tmp_cast_fu_462_p1[30 : 0];
        tmp_reg_1107 <= {{trans_size_reg_274[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln704_reg_1297 <= icmp_ln704_fu_1021_p2;
        icmp_ln704_reg_1297_pp3_iter1_reg <= icmp_ln704_reg_1297;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln79_reg_1084 <= icmp_ln79_fu_435_p2;
        j_3_reg_1079 <= j_3_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp5_i_reg_1160 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        mines_reg_1254 <= mines_fu_879_p2;
        plus_reg_1259 <= plus_fu_892_p2;
        sub_ln55_reg_1266 <= sub_ln55_fu_898_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((icmp_ln704_reg_1297 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        reg_354 <= xin_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        sdiv_ln493_reg_1121 <= grp_fu_472_p2;
        trunc_ln493_1_reg_1131 <= {{trans_size_reg_274[10:1]}};
        trunc_ln493_reg_1126[9 : 1] <= trunc_ln493_fu_478_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        xin_addr_1_reg_1088 <= zext_ln79_fu_430_p1;
        xin_addr_2_reg_1093 <= zext_ln71_reg_1044;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        xin_load_4_reg_1206 <= xin_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln71_fu_376_p2 == 1'd0))) begin
        zext_ln71_1_reg_1049[10 : 0] <= zext_ln71_1_fu_386_p1[10 : 0];
        zext_ln71_reg_1044[10 : 0] <= zext_ln71_fu_382_p1[10 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln704_fu_1021_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state34 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state34 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln635_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_IN_TDATA_blk_n = data_IN_TVALID_int_regslice;
    end else begin
        data_IN_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln635_fu_365_p2 == 1'd0) & (data_IN_TVALID_int_regslice == 1'b0)) & (icmp_ln635_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_IN_TREADY_int_regslice = 1'b1;
    end else begin
        data_IN_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (icmp_ln704_reg_1297_pp3_iter1_reg == 1'd0)) | ((icmp_ln704_reg_1297 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        data_OUT_TDATA_blk_n = data_OUT_TREADY_int_regslice;
    end else begin
        data_OUT_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln704_reg_1297 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        data_OUT_TVALID_int_regslice = 1'b1;
    end else begin
        data_OUT_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln493_fu_466_p2 == 1'd0) & (icmp_ln491_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_472_ap_start = 1'b1;
    end else begin
        grp_fu_472_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        xin_address0 = zext_ln498_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        xin_address0 = xin_addr_2_reg_1093;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        xin_address0 = xin_addr_1_reg_1088;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        xin_address0 = zext_ln71_reg_1044;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_address0 = i_cast_fu_371_p1;
    end else begin
        xin_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        xin_address1 = i_2_cast_fu_1027_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        xin_address1 = xin_addr_5_reg_1200;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        xin_address1 = xin_addr_4_reg_1195;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        xin_address1 = zext_ln497_fu_580_p1;
    end else begin
        xin_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (~((icmp_ln635_fu_365_p2 == 1'd0) & (data_IN_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        xin_ce0 = 1'b1;
    end else begin
        xin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state27) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        xin_ce1 = 1'b1;
    end else begin
        xin_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        xin_d0 = xin_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_d0 = data_IN_TDATA_int_regslice;
    end else begin
        xin_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        xin_d1 = sub_ln511_fu_1003_p2;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        xin_d1 = select_ln510_fu_969_p3;
    end else begin
        xin_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln79_reg_1084 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | (~((icmp_ln635_fu_365_p2 == 1'd0) & (data_IN_TVALID_int_regslice == 1'b0)) & (icmp_ln635_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        xin_we0 = 1'b1;
    end else begin
        xin_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30))) begin
        xin_we1 = 1'b1;
    end else begin
        xin_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        xx_ce0 = 1'b1;
    end else begin
        xx_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln635_fu_365_p2 == 1'd0) & (data_IN_TVALID_int_regslice == 1'b0)) & (icmp_ln635_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln635_fu_365_p2 == 1'd0) & (data_IN_TVALID_int_regslice == 1'b0)) & (icmp_ln635_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln71_fu_376_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln74_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln79_fu_435_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln491_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((icmp_ln493_fu_466_p2 == 1'd1) & (icmp_ln491_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & ((icmp_ln493_1_fu_502_p2 == 1'd1) | (icmp_ln493_reg_1117 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln494_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln704_fu_1021_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln704_fu_1021_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_fu_784_p2 = (zext_ln40_fu_780_p1 + trunc_ln5_reg_1249);

assign add11_i_fu_957_p2 = (reg_354 + b_3_fu_939_p3);

assign add_ln35_fu_667_p2 = (zext_ln35_2_fu_663_p1 + zext_ln35_1_fu_655_p1);

assign add_ln36_fu_673_p2 = (trunc_ln35_3_fu_641_p4 + trunc_ln35_fu_651_p1);

assign add_ln37_fu_740_p2 = (zext_ln37_1_fu_734_p1 + zext_ln37_2_fu_737_p1);

assign add_ln42_1_fu_789_p2 = (trunc_ln37_3_reg_1231 + trunc_ln37_4_reg_1237);

assign add_ln42_2_fu_793_p2 = (trunc_ln37_reg_1243 + zext_ln38_fu_766_p1);

assign add_ln42_fu_798_p2 = (add_ln42_2_fu_793_p2 + add_ln42_1_fu_789_p2);

assign add_ln47_fu_833_p2 = (shl_ln_fu_825_p3 + zext_ln42_2_fu_817_p1);

assign add_ln491_fu_543_p2 = (wbarr_fu_134 + tmp_cast_reg_1112);

assign add_ln493_fu_496_p2 = (t_reg_296 + 31'd1);

assign add_ln494_fu_559_p2 = (trans_reg_318 + 32'd1);

assign add_ln495_1_fu_570_p2 = (phi_mul_reg_329 + trunc_ln493_reg_1126);

assign add_ln495_fu_575_p2 = (phi_mul_reg_329 + trunc_ln493_2_reg_1155);

assign add_ln497_fu_585_p2 = (add_ln495_fu_575_p2 + trunc_ln493_1_reg_1131);

assign add_ln510_fu_963_p2 = (add11_i_fu_957_p2 + 64'd4294967295);

assign add_ln511_fu_989_p2 = ($signed(reg_354) + $signed(64'd18446744069414584321));

assign add_ln516_fu_1009_p2 = (wbarr_1_reg_286 + 33'd1);

assign add_ln55_fu_926_p2 = ($signed(sext_ln55_fu_923_p1) + $signed(plus_reg_1259));

assign add_ln635_fu_359_p2 = (i_reg_217 + 11'd1);

assign add_ln704_fu_1015_p2 = (i_2_reg_340 + 11'd1);

assign add_ln71_fu_440_p2 = (i_1_reg_228 + 11'd1);

assign and_ln_fu_849_p3 = {{tmp_5_fu_839_p4}, {32'd0}};

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = (((ap_enable_reg_pp3_iter2 == 1'b1) & (data_OUT_TREADY_int_regslice == 1'b0) & (icmp_ln704_reg_1297_pp3_iter1_reg == 1'd0)) | ((icmp_ln704_reg_1297 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (data_OUT_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((ap_enable_reg_pp3_iter2 == 1'b1) & ((1'b1 == ap_block_state36_io) | ((data_OUT_TREADY_int_regslice == 1'b0) & (icmp_ln704_reg_1297_pp3_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state35_io) | ((icmp_ln704_reg_1297 == 1'd0) & (data_OUT_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((ap_enable_reg_pp3_iter2 == 1'b1) & ((1'b1 == ap_block_state36_io) | ((data_OUT_TREADY_int_regslice == 1'b0) & (icmp_ln704_reg_1297_pp3_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state35_io) | ((icmp_ln704_reg_1297 == 1'd0) & (data_OUT_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln635_fu_365_p2 == 1'd0) & (data_IN_TVALID_int_regslice == 1'b0));
end

assign ap_block_state34_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_io = ((icmp_ln704_reg_1297 == 1'd0) & (data_OUT_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state35_pp3_stage0_iter1 = ((icmp_ln704_reg_1297 == 1'd0) & (data_OUT_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state36_io = ((data_OUT_TREADY_int_regslice == 1'b0) & (icmp_ln704_reg_1297_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state36_pp3_stage0_iter2 = ((data_OUT_TREADY_int_regslice == 1'b0) & (icmp_ln704_reg_1297_pp3_iter1_reg == 1'd0));
end

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_1_fu_421_p1 = $signed(tmp_1_fu_411_p4);

assign b_2_fu_931_p3 = ((xor_ln52_fu_912_p2[0:0] == 1'b1) ? sub_ln53_fu_918_p2 : add_ln55_fu_926_p2);

assign b_3_fu_939_p3 = ((cmp5_i_reg_1160[0:0] == 1'b1) ? xin_load_4_reg_1206 : b_2_fu_931_p3);

assign b_cast_fu_395_p1 = b_reg_263;

assign bpc_1_fu_869_p2 = (and_ln_fu_849_p3 - zext_ln47_fu_865_p1);

assign bpc_fu_811_p2 = (zext_ln42_fu_804_p1 + zext_ln42_1_fu_808_p1);

assign c_fu_679_p2 = (add_ln36_fu_673_p2 + trunc_ln35_1_fu_659_p1);

assign cmp5_i_fu_515_p2 = ((wb_reg_307 == 64'd1) ? 1'b1 : 1'b0);

assign conv6_i_i_fu_539_p1 = y0_fu_521_p1;

assign d_fu_637_p1 = x0y0_fu_617_p2[31:0];

assign data_IN_TREADY = regslice_both_data_IN_U_ack_in;

assign data_OUT_TVALID = regslice_both_data_OUT_U_vld_out;

assign grp_fu_472_p0 = 32'd1024;

assign i_2_cast_fu_1027_p1 = i_2_reg_340;

assign i_cast_fu_371_p1 = i_reg_217;

assign icmp_ln491_fu_446_p2 = (($signed(trans_size_reg_274) < $signed(32'd1025)) ? 1'b1 : 1'b0);

assign icmp_ln493_1_fu_502_p2 = ((t_reg_296 == tmp_reg_1107) ? 1'b1 : 1'b0);

assign icmp_ln493_fu_466_p2 = ((tmp_fu_452_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln494_fu_565_p2 = ((trans_reg_318 == sdiv_ln493_reg_1121) ? 1'b1 : 1'b0);

assign icmp_ln510_fu_951_p2 = ((sub_ln510_fu_945_p2 > b_3_fu_939_p3) ? 1'b1 : 1'b0);

assign icmp_ln511_fu_978_p2 = ((reg_354 < b_3_reg_1271) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_907_p2 = ((plus_reg_1259 < zext_ln49_1_fu_904_p1) ? 1'b1 : 1'b0);

assign icmp_ln635_fu_365_p2 = ((i_reg_217 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln704_fu_1021_p2 = ((i_2_reg_340 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_376_p2 = ((i_1_reg_228 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_399_p2 = (($signed(j_1_reg_252) < $signed(b_cast_fu_395_p1)) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_435_p2 = (($signed(j_3_fu_425_p2) > $signed(zext_ln71_1_reg_1049)) ? 1'b1 : 1'b0);

assign j_2_fu_405_p2 = ($signed(j_1_reg_252) - $signed(b_cast_fu_395_p1));

assign j_3_fu_425_p2 = ($signed(j_1_reg_252) + $signed(b_cast_reg_1061));

assign mines_fu_879_p2 = (zext_ln49_fu_875_p1 + zext_ln42_fu_804_p1);

assign plus_fu_892_p2 = (bpc_1_fu_869_p2 + zext_ln50_fu_889_p1);

assign pp1_fu_725_p2 = (zext_ln35_3_fu_722_p1 + zext_ln35_fu_719_p1);

assign pp2_fu_750_p2 = (zext_ln37_3_fu_746_p1 + zext_ln37_fu_731_p1);

assign select_ln510_fu_969_p3 = ((icmp_ln510_fu_951_p2[0:0] == 1'b1) ? add11_i_fu_957_p2 : add_ln510_fu_963_p2);

assign select_ln511_fu_995_p3 = ((xor_ln511_fu_983_p2[0:0] == 1'b1) ? reg_354 : add_ln511_fu_989_p2);

assign sext_ln493_fu_492_p0 = wbarr_fu_134;

assign sext_ln493_fu_492_p1 = sext_ln493_fu_492_p0;

assign sext_ln55_fu_923_p1 = $signed(sub_ln55_reg_1266);

assign shl_ln_fu_825_p3 = {{trunc_ln47_fu_821_p1}, {32'd0}};

assign sub_ln510_fu_945_p2 = ($signed(64'd18446744069414584321) - $signed(reg_354));

assign sub_ln511_fu_1003_p2 = (select_ln511_fu_995_p3 - b_3_reg_1271);

assign sub_ln53_fu_918_p2 = (plus_reg_1259 - zext_ln49_1_fu_904_p1);

assign sub_ln55_fu_898_p2 = ($signed(35'd30064771073) - $signed(zext_ln49_2_fu_885_p1));

assign tmp_1_fu_411_p4 = {{b_reg_263[29:1]}};

assign tmp_2_fu_756_p4 = {{pp1_fu_725_p2[33:32]}};

assign tmp_3_fu_770_p4 = {{pp2_fu_750_p2[33:32]}};

assign tmp_4_fu_857_p3 = bpc_fu_811_p2[32'd32];

assign tmp_5_fu_839_p4 = {{add_ln47_fu_833_p2[63:32]}};

assign tmp_cast_fu_462_p1 = tmp_fu_452_p4;

assign tmp_fu_452_p4 = {{trans_size_reg_274[31:1]}};

assign trans_size_1_fu_553_p2 = trans_size_reg_274 << 32'd1;

assign trunc_ln35_1_fu_659_p1 = x0y1_fu_622_p2[31:0];

assign trunc_ln35_3_fu_641_p4 = {{x0y0_fu_617_p2[63:32]}};

assign trunc_ln35_fu_651_p1 = x1y0_fu_627_p2[31:0];

assign trunc_ln37_fu_705_p1 = x1y1_fu_632_p2[31:0];

assign trunc_ln47_fu_821_p1 = bpc_fu_811_p2[31:0];

assign trunc_ln493_2_fu_511_p1 = t_reg_296[9:0];

assign trunc_ln493_fu_478_p1 = trans_size_reg_274[9:0];

assign x0_fu_595_p1 = xin_q0[31:0];

assign x0y0_fu_617_p0 = zext_ln27_fu_613_p1;

assign x0y0_fu_617_p1 = conv6_i_i_reg_1171;

assign x0y1_fu_622_p0 = zext_ln27_fu_613_p1;

assign x0y1_fu_622_p1 = y1_1_reg_1165;

assign x1_fu_599_p4 = {{xin_q0[63:32]}};

assign x1y0_fu_627_p0 = zext_ln20_fu_609_p1;

assign x1y0_fu_627_p1 = conv6_i_i_reg_1171;

assign x1y1_fu_632_p0 = zext_ln20_fu_609_p1;

assign x1y1_fu_632_p1 = y1_1_reg_1165;

assign xor_ln511_fu_983_p2 = (icmp_ln511_fu_978_p2 ^ 1'd1);

assign xor_ln52_fu_912_p2 = (icmp_ln52_fu_907_p2 ^ 1'd1);

assign xx_address0 = zext_ln493_reg_1150;

assign y0_fu_521_p1 = wb_reg_307[31:0];

assign y1_1_fu_535_p1 = y1_fu_525_p4;

assign y1_fu_525_p4 = {{wb_reg_307[63:32]}};

assign zext_ln20_fu_609_p1 = x1_fu_599_p4;

assign zext_ln27_fu_613_p1 = x0_fu_595_p1;

assign zext_ln35_1_fu_655_p1 = trunc_ln35_fu_651_p1;

assign zext_ln35_2_fu_663_p1 = trunc_ln35_1_fu_659_p1;

assign zext_ln35_3_fu_722_p1 = add_ln35_reg_1221;

assign zext_ln35_fu_719_p1 = trunc_ln35_3_reg_1216;

assign zext_ln37_1_fu_734_p1 = trunc_ln37_4_reg_1237;

assign zext_ln37_2_fu_737_p1 = trunc_ln37_reg_1243;

assign zext_ln37_3_fu_746_p1 = add_ln37_fu_740_p2;

assign zext_ln37_fu_731_p1 = trunc_ln37_3_reg_1231;

assign zext_ln38_fu_766_p1 = tmp_2_fu_756_p4;

assign zext_ln40_fu_780_p1 = tmp_3_fu_770_p4;

assign zext_ln42_1_fu_808_p1 = c_reg_1226;

assign zext_ln42_2_fu_817_p1 = bpc_fu_811_p2;

assign zext_ln42_fu_804_p1 = add_ln42_fu_798_p2;

assign zext_ln47_fu_865_p1 = tmp_4_fu_857_p3;

assign zext_ln493_fu_507_p1 = wbarr_1_reg_286;

assign zext_ln497_fu_580_p1 = add_ln495_fu_575_p2;

assign zext_ln498_fu_590_p1 = add_ln497_fu_585_p2;

assign zext_ln49_1_fu_904_p1 = mines_reg_1254;

assign zext_ln49_2_fu_885_p1 = mines_fu_879_p2;

assign zext_ln49_fu_875_p1 = a_1_fu_784_p2;

assign zext_ln50_fu_889_p1 = d_reg_1211;

assign zext_ln71_1_fu_386_p1 = i_1_reg_228;

assign zext_ln71_fu_382_p1 = i_1_reg_228;

assign zext_ln79_fu_430_p1 = j_3_fu_425_p2;

always @ (posedge ap_clk) begin
    zext_ln71_reg_1044[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln71_1_reg_1049[31:11] <= 21'b000000000000000000000;
    tmp_cast_reg_1112[31] <= 1'b0;
    trunc_ln493_reg_1126[0] <= 1'b0;
    zext_ln493_reg_1150[63:33] <= 31'b0000000000000000000000000000000;
    y1_1_reg_1165[63:32] <= 32'b00000000000000000000000000000000;
    conv6_i_i_reg_1171[63:32] <= 32'b00000000000000000000000000000000;
    trans_size_reg_274[0] <= 1'b0;
end

endmodule //ntt_IPS
